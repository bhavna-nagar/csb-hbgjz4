{"version":3,"sources":["api/client.js","features/notifications/notificationsSlice.js","app/Navbar.js","components/Spinner.js","features/users/usersSlice.js","features/posts/PostAuthor.js","features/posts/TimeAgo.js","features/posts/postsSlice.js","features/posts/ReactionButtons.js","features/posts/PostsList.js","features/posts/AddPostForm.js","features/posts/EditPostForm.js","features/posts/SinglePostPage.js","features/users/UsersList.js","features/users/UserPage.js","features/notifications/NotificationsList.js","App.js","api/server.js","app/store.js","index.js"],"names":["client","endpoint","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","status","url","Error","statusText","Promise","reject","message","get","post","notificationsAdapter","createEntityAdapter","sortComparer","a","b","date","localeCompare","fetchNotifications","createAsyncThunk","_","getState","allNotifications","selectAllNotifications","latestNotification","latestTimestamp","notificationsSlice","createSlice","name","initialState","getInitialState","reducers","allNotificationsRead","state","action","Object","values","entities","forEach","notification","read","extraReducers","builder","addCase","fulfilled","notificationsWithMetadata","payload","map","isNew","upsertMany","actions","getSelectors","notifications","selectAll","Navbar","unreadNotificationsBadge","dispatch","useDispatch","numUnreadNotifications","useSelector","filter","n","length","className","to","onClick","Spinner","text","size","header","style","height","width","usersAdapter","fetchUsers","usersSlice","setAll","users","selectAllUsers","selectUserById","selectById","PostAuthor","userId","author","TimeAgo","timestamp","timeAgo","parseISO","timePeriod","formatDistanceToNow","title","postsAdapter","error","fetchPosts","addNewPost","initialPost","postsSlice","reactionAdded","postId","reaction","existingPost","reactions","postUpdated","id","content","pending","rejected","addOne","postAdded","posts","selectAllPosts","selectPostById","selectPostIds","selectIds","selectPostsByUser","createSelector","user","reactionEmoji","thumbsUp","hooray","heart","rocket","eyes","ReactionButtons","reactionButtons","entries","emoji","type","PostExcerpt","substring","PostsList","orderedPostIds","postStatus","useEffect","AddPostForm","useState","setTitle","setContent","setUserId","addRequestStatus","setAddRequestStatus","canSave","every","Boolean","onSavePostClicked","unwrap","console","usersOptions","value","htmlFor","placeholder","onChange","e","target","disabled","EditPostForm","match","params","history","useHistory","push","SinglePostPage","UsersList","renderedUsers","UserPage","postTitles","NotificationsList","useLayoutEffect","renderedNotifications","find","notificationClassname","classnames","new","App","seedDate","exact","path","render","Fragment","component","configureStore","reducer","postsReducer","usersReducer","notificationsReducer","ARTIFICIAL_DELAY_MS","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","db","factory","primaryKey","nanoid","firstName","String","lastName","username","manyOf","oneOf","comments","comment","Number","createUserData","internet","userName","i","create","j","newPost","lorem","words","recent","paragraphs","serializePost","handlers","rest","req","res","ctx","getAll","delay","findFirst","where","equals","patch","updatedPost","update","generateRandomNotifications","undefined","worker","setupWorker","socketServer","MockSocketServer","sendRandomNotifications","socket","since","obj","send","sendMessage","on","parse","notificationTemplates","numNotifications","pastDate","now","valueOf","setMinutes","getMinutes","Array","template","between","start","onUnhandledRequest","store","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c5e97e16.chunk.js","sourcesContent":["// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  try {\n    const response = await window.fetch(endpoint, config)\n    data = await response.json()\n    if (response.ok) {\n      // Return a result object similar to Axios\n      return {\n        status: response.status,\n        data,\n        headers: response.headers,\n        url: response.url,\n      }\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}\n","import {\n  createSlice,\n  createAsyncThunk,\n  createEntityAdapter,\n} from '@reduxjs/toolkit'\n\nimport { client } from '../../api/client'\n\nconst notificationsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date),\n})\n\nexport const fetchNotifications = createAsyncThunk(\n  'notifications/fetchNotifications',\n  async (_, { getState }) => {\n    const allNotifications = selectAllNotifications(getState())\n    const [latestNotification] = allNotifications\n    const latestTimestamp = latestNotification ? latestNotification.date : ''\n    const response = await client.get(\n      `/fakeApi/notifications?since=${latestTimestamp}`\n    )\n    return response.data\n  }\n)\n\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState: notificationsAdapter.getInitialState(),\n  reducers: {\n    allNotificationsRead(state, action) {\n      Object.values(state.entities).forEach((notification) => {\n        notification.read = true\n      })\n    },\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchNotifications.fulfilled, (state, action) => {\n      // Add client-side metadata for tracking new notifications\n      const notificationsWithMetadata = action.payload.map((notification) => ({\n        ...notification,\n        read: false,\n        isNew: true,\n      }))\n\n      Object.values(state.entities).forEach((notification) => {\n        // Any notifications we've read are no longer new\n        notification.isNew = !notification.read\n      })\n\n      notificationsAdapter.upsertMany(state, notificationsWithMetadata)\n    })\n  },\n})\n\nexport const { allNotificationsRead } = notificationsSlice.actions\n\nexport default notificationsSlice.reducer\n\nexport const {\n  selectAll: selectAllNotifications,\n} = notificationsAdapter.getSelectors((state) => state.notifications)\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport {\n  fetchNotifications,\n  selectAllNotifications,\n} from '../features/notifications/notificationsSlice'\n\nexport const Navbar = () => {\n  const dispatch = useDispatch()\n  const notifications = useSelector(selectAllNotifications)\n  const numUnreadNotifications = notifications.filter((n) => !n.read).length\n\n  const fetchNewNotifications = () => {\n    dispatch(fetchNotifications())\n  }\n\n  let unreadNotificationsBadge\n\n  if (numUnreadNotifications > 0) {\n    unreadNotificationsBadge = (\n      <span className=\"badge\">{numUnreadNotifications}</span>\n    )\n  }\n\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            <Link to=\"/\">Posts</Link>\n            <Link to=\"/users\">Users</Link>\n            <Link to=\"/notifications\">\n              Notifications {unreadNotificationsBadge}\n            </Link>\n          </div>\n\n          <button className=\"button\" onClick={fetchNewNotifications}>\n            Refresh Notifications\n          </button>\n        </div>\n      </section>\n    </nav>\n  )\n}\n","import React from 'react'\n\nexport const Spinner = ({ text = '', size = '5em' }) => {\n  const header = text ? <h4>{text}</h4> : null\n  return (\n    <div className=\"spinner\">\n      {header}\n      <div className=\"loader\" style={{ height: size, width: size }} />\n    </div>\n  )\n}\n","import {\n  createSlice,\n  createAsyncThunk,\n  createEntityAdapter,\n} from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nconst usersAdapter = createEntityAdapter()\n\nconst initialState = usersAdapter.getInitialState()\n\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n  const response = await client.get('/fakeApi/users')\n  return response.data\n})\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers(builder) {\n    builder.addCase(fetchUsers.fulfilled, usersAdapter.setAll)\n  },\n})\n\nexport default usersSlice.reducer\n\nexport const {\n  selectAll: selectAllUsers,\n  selectById: selectUserById,\n} = usersAdapter.getSelectors((state) => state.users)\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { selectUserById } from '../users/usersSlice'\n\nexport const PostAuthor = ({ userId }) => {\n  const author = useSelector((state) => selectUserById(state, userId))\n\n  return <span>by {author ? author.name : 'Unknown author'}</span>\n}\n","import React from 'react'\nimport { parseISO, formatDistanceToNow } from 'date-fns'\n\nexport const TimeAgo = ({ timestamp }) => {\n  let timeAgo = ''\n  if (timestamp) {\n    const date = parseISO(timestamp)\n    const timePeriod = formatDistanceToNow(date)\n    timeAgo = `${timePeriod} ago`\n  }\n\n  return (\n    <span title={timestamp}>\n      &nbsp; <i>{timeAgo}</i>\n    </span>\n  )\n}\n","import {\n  createSlice,\n  createAsyncThunk,\n  createSelector,\n  createEntityAdapter,\n} from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nconst postsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date),\n})\n\nconst initialState = postsAdapter.getInitialState({\n  status: 'idle',\n  error: null,\n})\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts')\n  return response.data\n})\n\nexport const addNewPost = createAsyncThunk(\n  'posts/addNewPost',\n  async (initialPost) => {\n    const response = await client.post('/fakeApi/posts', initialPost)\n    return response.data\n  }\n)\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload\n      const existingPost = state.entities[postId]\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    },\n    postUpdated(state, action) {\n      const { id, title, content } = action.payload\n      const existingPost = state.entities[id]\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchPosts.pending, (state, action) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = 'succeeded'\n        // Add any fetched posts to the array\n        postsAdapter.upsertMany(state, action.payload)\n      })\n      .addCase(fetchPosts.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n      })\n      .addCase(addNewPost.fulfilled, postsAdapter.addOne)\n  },\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\nexport default postsSlice.reducer\n\nexport const {\n  selectAll: selectAllPosts,\n  selectById: selectPostById,\n  selectIds: selectPostIds,\n} = postsAdapter.getSelectors((state) => state.posts)\n\nexport const selectPostsByUser = createSelector(\n  [selectAllPosts, (state, userId) => userId],\n  (posts, userId) => posts.filter((post) => post.user === userId)\n)\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { reactionAdded } from './postsSlice'\n\nconst reactionEmoji = {\n  thumbsUp: '👍',\n  hooray: '🎉',\n  heart: '❤️',\n  rocket: '🚀',\n  eyes: '👀',\n}\n\nexport const ReactionButtons = ({ post }) => {\n  const dispatch = useDispatch()\n\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\n    return (\n      <button\n        key={name}\n        type=\"button\"\n        className=\"muted-button reaction-button\"\n        onClick={() =>\n          dispatch(reactionAdded({ postId: post.id, reaction: name }))\n        }\n      >\n        {emoji} {post.reactions[name]}\n      </button>\n    )\n  })\n\n  return <div>{reactionButtons}</div>\n}\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { Spinner } from '../../components/Spinner'\nimport { PostAuthor } from './PostAuthor'\nimport { TimeAgo } from './TimeAgo'\nimport { ReactionButtons } from './ReactionButtons'\nimport {\n  selectAllPosts,\n  fetchPosts,\n  selectPostIds,\n  selectPostById,\n} from './postsSlice'\n\nlet PostExcerpt = ({ postId }) => {\n  const post = useSelector((state) => selectPostById(state, postId))\n\n  return (\n    <article className=\"post-excerpt\" key={post.id}>\n      <h3>{post.title}</h3>\n      <div>\n        <PostAuthor userId={post.user} />\n        <TimeAgo timestamp={post.date} />\n      </div>\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\n\n      <ReactionButtons post={post} />\n      <Link to={`/posts/${post.id}`} className=\"button muted-button\">\n        View Post\n      </Link>\n    </article>\n  )\n}\n\nexport const PostsList = () => {\n  const dispatch = useDispatch()\n  const orderedPostIds = useSelector(selectPostIds)\n\n  const postStatus = useSelector((state) => state.posts.status)\n  const error = useSelector((state) => state.posts.error)\n\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPosts())\n    }\n  }, [postStatus, dispatch])\n\n  let content\n\n  if (postStatus === 'loading') {\n    content = <Spinner text=\"Loading...\" />\n  } else if (postStatus === 'succeeded') {\n    content = orderedPostIds.map((postId) => (\n      <PostExcerpt key={postId} postId={postId} />\n    ))\n  } else if (postStatus === 'failed') {\n    content = <div>{error}</div>\n  }\n\n  return (\n    <section className=\"posts-list\">\n      <h2>Posts</h2>\n      {content}\n    </section>\n  )\n}\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { addNewPost } from './postsSlice'\nimport { selectAllUsers } from '../users/usersSlice'\n\nexport const AddPostForm = () => {\n  const [title, setTitle] = useState('')\n  const [content, setContent] = useState('')\n  const [userId, setUserId] = useState('')\n  const [addRequestStatus, setAddRequestStatus] = useState('idle')\n\n  const dispatch = useDispatch()\n  const users = useSelector(selectAllUsers)\n\n  const onTitleChanged = (e) => setTitle(e.target.value)\n  const onContentChanged = (e) => setContent(e.target.value)\n  const onAuthorChanged = (e) => setUserId(e.target.value)\n\n  const canSave =\n    [title, content, userId].every(Boolean) && addRequestStatus === 'idle'\n\n  const onSavePostClicked = async () => {\n    if (canSave) {\n      try {\n        setAddRequestStatus('pending')\n        await dispatch(addNewPost({ title, content, user: userId })).unwrap()\n        setTitle('')\n        setContent('')\n        setUserId('')\n      } catch (err) {\n        console.error('Failed to save the post: ', err)\n      } finally {\n        setAddRequestStatus('idle')\n      }\n    }\n  }\n\n  const usersOptions = users.map((user) => (\n    <option key={user.id} value={user.id}>\n      {user.name}\n    </option>\n  ))\n\n  return (\n    <section>\n      <h2>Add a New Post</h2>\n      <form>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input\n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          placeholder=\"What's on your mind?\"\n          value={title}\n          onChange={onTitleChanged}\n        />\n        <label htmlFor=\"postAuthor\">Author:</label>\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n          <option value=\"\"></option>\n          {usersOptions}\n        </select>\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          value={content}\n          onChange={onContentChanged}\n        />\n        <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\n          Save Post\n        </button>\n      </form>\n    </section>\n  )\n}\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\nimport { postUpdated, selectPostById } from './postsSlice'\n\nexport const EditPostForm = ({ match }) => {\n  const { postId } = match.params\n\n  const post = useSelector((state) => selectPostById(state, postId))\n\n  const [title, setTitle] = useState(post.title)\n  const [content, setContent] = useState(post.content)\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const onTitleChanged = (e) => setTitle(e.target.value)\n  const onContentChanged = (e) => setContent(e.target.value)\n\n  const onSavePostClicked = () => {\n    if (title && content) {\n      dispatch(postUpdated({ id: postId, title, content }))\n      history.push(`/posts/${postId}`)\n    }\n  }\n\n  return (\n    <section>\n      <h2>Edit Post</h2>\n      <form>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input\n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          placeholder=\"What's on your mind?\"\n          value={title}\n          onChange={onTitleChanged}\n        />\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          value={content}\n          onChange={onContentChanged}\n        />\n      </form>\n      <button type=\"button\" onClick={onSavePostClicked}>\n        Save Post\n      </button>\n    </section>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { PostAuthor } from './PostAuthor'\nimport { TimeAgo } from './TimeAgo'\nimport { ReactionButtons } from './ReactionButtons'\nimport { selectPostById } from './postsSlice'\n\nexport const SinglePostPage = ({ match }) => {\n  const { postId } = match.params\n\n  const post = useSelector((state) => selectPostById(state, postId))\n\n  if (!post) {\n    return (\n      <section>\n        <h2>Post not found!</h2>\n      </section>\n    )\n  }\n\n  return (\n    <section>\n      <article className=\"post\">\n        <h2>{post.title}</h2>\n        <div>\n          <PostAuthor userId={post.user} />\n          <TimeAgo timestamp={post.date} />\n        </div>\n        <p className=\"post-content\">{post.content}</p>\n        <ReactionButtons post={post} />\n        <Link to={`/editPost/${post.id}`} className=\"button\">\n          Edit Post\n        </Link>\n      </article>\n    </section>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { selectAllUsers } from './usersSlice'\n\nexport const UsersList = () => {\n  const users = useSelector(selectAllUsers)\n\n  const renderedUsers = users.map((user) => (\n    <li key={user.id}>\n      <Link to={`/users/${user.id}`}>{user.name}</Link>\n    </li>\n  ))\n\n  return (\n    <section>\n      <h2>Users</h2>\n\n      <ul>{renderedUsers}</ul>\n    </section>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { selectUserById } from '../users/usersSlice'\nimport { selectPostsByUser } from '../posts/postsSlice'\n\nexport const UserPage = ({ match }) => {\n  const { userId } = match.params\n\n  const user = useSelector((state) => selectUserById(state, userId))\n\n  const postsForUser = useSelector((state) => selectPostsByUser(state, userId))\n\n  const postTitles = postsForUser.map((post) => (\n    <li key={post.id}>\n      <Link to={`/posts/${post.id}`}>{post.title}</Link>\n    </li>\n  ))\n\n  return (\n    <section>\n      <h2>{user.name}</h2>\n\n      <ul>{postTitles}</ul>\n    </section>\n  )\n}\n","import React, { useLayoutEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { formatDistanceToNow, parseISO } from 'date-fns'\nimport classnames from 'classnames'\n\nimport { selectAllUsers } from '../users/usersSlice'\n\nimport {\n  selectAllNotifications,\n  allNotificationsRead,\n} from './notificationsSlice'\n\nexport const NotificationsList = () => {\n  const dispatch = useDispatch()\n  const notifications = useSelector(selectAllNotifications)\n  const users = useSelector(selectAllUsers)\n\n  useLayoutEffect(() => {\n    dispatch(allNotificationsRead())\n  })\n\n  const renderedNotifications = notifications.map((notification) => {\n    const date = parseISO(notification.date)\n    const timeAgo = formatDistanceToNow(date)\n    const user = users.find((user) => user.id === notification.user) || {\n      name: 'Unknown User',\n    }\n\n    const notificationClassname = classnames('notification', {\n      new: notification.isNew,\n    })\n\n    return (\n      <div key={notification.id} className={notificationClassname}>\n        <div>\n          <b>{user.name}</b> {notification.message}\n        </div>\n        <div title={notification.date}>\n          <i>{timeAgo} ago</i>\n        </div>\n      </div>\n    )\n  })\n\n  return (\n    <section className=\"notificationsList\">\n      <h2>Notifications</h2>\n      {renderedNotifications}\n    </section>\n  )\n}\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\n\nimport { Navbar } from './app/Navbar'\n\nimport { PostsList } from './features/posts/PostsList'\nimport { AddPostForm } from './features/posts/AddPostForm'\nimport { EditPostForm } from './features/posts/EditPostForm'\nimport { SinglePostPage } from './features/posts/SinglePostPage'\nimport { UsersList } from './features/users/UsersList'\nimport { UserPage } from './features/users/UserPage'\nimport { NotificationsList } from './features/notifications/NotificationsList'\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <AddPostForm />\n                <PostsList />\n              </React.Fragment>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\n          <Route exact path=\"/users\" component={UsersList} />\n          <Route exact path=\"/users/:userId\" component={UserPage} />\n          <Route exact path=\"/notifications\" component={NotificationsList} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import { rest, setupWorker } from 'msw'\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data'\nimport { nanoid } from '@reduxjs/toolkit'\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\nimport { Server as MockSocketServer } from 'mock-socket'\nimport { setRandom } from 'txtgen'\n\nimport { parseISO } from 'date-fns'\n\nconst NUM_USERS = 3\nconst POSTS_PER_USER = 3\nconst RECENT_NOTIFICATIONS_DAYS = 7\n\n// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 2000\n\n/* RNG setup */\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\n/* MSW Data Model Setup */\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf('post'),\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf('reaction'),\n    comments: manyOf('comment'),\n    user: oneOf('user'),\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf('post'),\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf('post'),\n  },\n})\n\nconst createUserData = () => {\n  const firstName = faker.name.firstName()\n  const lastName = faker.name.lastName()\n\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName(),\n  }\n}\n\nconst createPostData = (user) => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create(),\n  }\n}\n\n// Create an initial set of users and posts\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData())\n\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author)\n    db.post.create(newPost)\n  }\n}\n\nconst serializePost = (post) => ({\n  ...post,\n  user: post.user.id,\n})\n\n/* MSW REST API Handlers */\n\nexport const handlers = [\n  rest.get('/fakeApi/posts', function (req, res, ctx) {\n    const posts = db.post.getAll().map(serializePost)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts))\n  }),\n  rest.post('/fakeApi/posts', function (req, res, ctx) {\n    const data = req.body\n\n    if (data.content === 'error') {\n      return res(\n        ctx.delay(ARTIFICIAL_DELAY_MS),\n        ctx.status(500),\n        ctx.json('Server error saving this post!')\n      )\n    }\n\n    data.date = new Date().toISOString()\n\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } })\n    data.user = user\n    data.reactions = db.reaction.create()\n\n    const post = db.post.create(data)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\n    const { id, ...data } = req.body\n    const updatedPost = db.post.update({\n      where: { id: { equals: req.params.postId } },\n      data,\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n\n  rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json({ comments: post.comments })\n    )\n  }),\n\n  rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\n    const postId = req.params.postId\n    const reaction = req.body.reaction\n    const post = db.post.findFirst({\n      where: { id: { equals: postId } },\n    })\n\n    const updatedPost = db.post.update({\n      where: { id: { equals: postId } },\n      data: {\n        reactions: {\n          ...post.reactions,\n          [reaction]: (post.reactions[reaction] += 1),\n        },\n      },\n    })\n\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n  rest.get('/fakeApi/notifications', (req, res, ctx) => {\n    const numNotifications = getRandomInt(1, 5)\n\n    let notifications = generateRandomNotifications(\n      undefined,\n      numNotifications,\n      db\n    )\n\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications))\n  }),\n  rest.get('/fakeApi/users', (req, res, ctx) => {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()))\n  }),\n]\n\nexport const worker = setupWorker(...handlers)\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer('ws://localhost')\n\nlet currentSocket\n\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj))\n}\n\n// Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5)\n\n  const notifications = generateRandomNotifications(since, numNotifications, db)\n\n  sendMessage(socket, { type: 'notifications', payload: notifications })\n}\n\nexport const forceGenerateNotifications = (since) => {\n  sendRandomNotifications(currentSocket, since)\n}\n\nsocketServer.on('connection', (socket) => {\n  currentSocket = socket\n\n  socket.on('message', (data) => {\n    const message = JSON.parse(data)\n\n    switch (message.type) {\n      case 'notifications': {\n        const since = message.payload\n        sendRandomNotifications(socket, since)\n        break\n      }\n      default:\n        break\n    }\n  })\n})\n\n/* Random Notifications Generation */\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date()\n  let pastDate\n\n  if (since) {\n    pastDate = parseISO(since)\n  } else {\n    pastDate = new Date(now.valueOf())\n    pastDate.setMinutes(pastDate.getMinutes() - 15)\n  }\n\n  // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll())\n    const template = randomFromArray(notificationTemplates)\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id,\n    }\n  })\n\n  return notifications\n}\n","import { configureStore } from '@reduxjs/toolkit'\n\nimport postsReducer from '../features/posts/postsSlice'\nimport usersReducer from '../features/users/usersSlice'\nimport notificationsReducer from '../features/notifications/notificationsSlice'\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n    users: usersReducer,\n    notifications: notificationsReducer,\n  },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nimport { worker } from './api/server'\n\nimport { fetchUsers } from './features/users/usersSlice'\n\n// Wrap app rendering so we can wait for the mock API to initialize\nasync function start() {\n  // Start our mock API server\n  await worker.start({ onUnhandledRequest: 'bypass' })\n\n  store.dispatch(fetchUsers())\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nstart()\n"],"sourceRoot":""}